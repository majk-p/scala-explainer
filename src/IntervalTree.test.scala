class IntervalTreeSpec extends munit.FunSuite {
  test("basics") {

    val spans = Map(
      OffsetRange(0, 4) -> "hello",
      OffsetRange(5, 7) -> "yo",
      OffsetRange(11, 14) -> "yoasd"
    )

    val itree = IntervalTree.construct(spans)

    assertEquals(itree.resolve(3), List("hello"))
    assertEquals(itree.resolve(12), List("yoasd"))
    assertEquals(itree.resolve(50), Nil)
    assertEquals(itree.resolve(6), List("yo"))

  }

  test("overlapping") {

    val spans = Map(
      OffsetRange(0, 4) -> "hello",
      OffsetRange(2, 7) -> "yo",
      OffsetRange(2, 5) -> "yolo",
      OffsetRange(6, 14) -> "yoasd",
      OffsetRange(8, 8) -> "YES"
    )

    val itree = IntervalTree.construct(spans)

    assertEquals(itree.resolve(3).toSet, Set("hello", "yo", "yolo"))
    assertEquals(itree.resolve(6).toSet, Set("yo", "yoasd"))
    assertEquals(itree.resolve(10).toSet, Set("yoasd"))
    assertEquals(itree.resolve(15), Nil)
  }

  test("repro") {
    val raw2 =
      "[0-1726], [4-1709], [4-12], [5-12], [12-12], [21-28], [28-28], [28-96], [38-47], [38-63], [49-53], [49-63], [53-63], [54-62], [73-90], [73-78], [80-90], [80-84], [84-90], [85-89], [98-104], [98-110], [104-110], [105-109], [245-1693], [245-1709], [245-254], [269-297], [269-1693], [274-277], [281-286], [281-297], [287-297], [306-575], [311-324], [311-350], [311-319], [311-358], [320-324], [324-350], [325-336], [338-349], [351-353], [354-358], [372-379], [372-575], [379-575], [393-397], [411-415], [411-563], [411-546], [411-421], [416-421], [421-546], [437-448], [464-469], [464-479], [464-474], [470-474], [475-479], [495-505], [495-500], [501-505], [521-532], [547-549], [550-563], [550-555], [550-550], [550-560], [556-560], [560-563], [561-562], [584-1693], [589-597], [589-618], [589-605], [589-626], [598-605], [605-618], [606-617], [619-621], [622-626], [640-1693], [643-664], [643-659], [643-654], [655-659], [660-662], [663-664], [663-663], [682-733], [682-689], [689-733], [690-694], [696-723], [696-705], [696-700], [696-732], [701-705], [705-723], [706-722], [706-717], [718-722], [724-726], [727-732], [727-727], [749-1693], [752-768], [752-763], [752-773], [764-768], [769-771], [772-773], [772-772], [779-813], [779-786], [786-813], [787-791], [793-797], [793-803], [793-812], [798-803], [804-806], [807-807], [807-812], [841-874], [841-1693], [845-850], [853-874], [853-864], [853-869], [865-869], [870-874], [887-916], [891-894], [897-916], [897-913], [897-908], [909-913], [914-916], [929-964], [933-944], [947-964], [948-953], [948-959], [954-955], [956-959], [956-956], [961-962], [963-963], [963-964], [1044-1101], [1048-1057], [1060-1101], [1060-1071], [1060-1081], [1072-1081], [1081-1101], [1082-1100], [1082-1086], [1082-1083], [1084-1086], [1087-1088], [1089-1089], [1089-1100], [1114-1174], [1118-1128], [1131-1152], [1131-1142], [1131-1174], [1143-1152], [1152-1174], [1153-1154], [1153-1173], [1153-1159], [1155-1159], [1160-1161], [1162-1162], [1162-1173], [1188-1320], [1192-1203], [1220-1320], [1220-1231], [1220-1238], [1232-1238], [1238-1320], [1239-1240], [1239-1304], [1260-1304], [1260-1266], [1260-1281], [1260-1261], [1262-1266], [1267-1269], [1270-1270], [1270-1281], [1282-1284], [1285-1286], [1285-1285], [1285-1304], [1285-1289], [1287-1289], [1290-1292], [1293-1304], [1293-1293], [1477-1693], [1477-1484], [1484-1693], [1500-1527], [1500-1516], [1500-1508], [1500-1658], [1509-1516], [1516-1527], [1517-1526], [1528-1530], [1547-1547], [1547-1658], [1547-1575], [1547-1563], [1547-1555], [1556-1563], [1563-1575], [1564-1574], [1576-1578], [1595-1658], [1595-1595], [1595-1634], [1595-1603], [1595-1608], [1604-1608], [1608-1634], [1609-1620], [1622-1633], [1635-1637], [1654-1654], [1654-1658], [1674-1679], [1700-1709], [1704-1709], [1714-1725], [1718-1725]"

    val spans = raw2
      .split(",")
      .map(_.trim)
      .map(_.stripPrefix("[").stripSuffix("]").split("-"))
      .zipWithIndex
      .map(x => (OffsetRange(x._1(0).toInt, x._1(1).toInt) -> x._2.toString))

    // Just check that it's not looping infinitely
    val tree = IntervalTree.construct(spans.toMap)

  }
}
